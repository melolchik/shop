package com.melolchik.shopapp.dao;

import org.greenrobot.greendao.annotation.*;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.melolchik.common.util.AppLogger;

import org.greenrobot.greendao.annotation.*;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.Collections;
import java.util.List;
// KEEP INCLUDES END

/**
 * Entity mapped to table "PRODUCT".
 */
@Entity
public class Product {

    @Id
    @Unique
    private long productId;

    @NotNull
    private String productName;
    private String productImage;
    private Float productPrice;
    private Long productCountry;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Product() {
    }

    public Product(long productId) {
        this.productId = productId;
    }

    @Generated
    public Product(long productId, String productName, String productImage, Float productPrice, Long productCountry) {
        this.productId = productId;
        this.productName = productName;
        this.productImage = productImage;
        this.productPrice = productPrice;
        this.productCountry = productCountry;
    }

    public long getProductId() {
        return productId;
    }

    public void setProductId(long productId) {
        this.productId = productId;
    }

    @NotNull
    public String getProductName() {
        return productName;
    }

    /**
     * Not-null value; ensure this value is available before it is saved to the database.
     */
    public void setProductName(@NotNull String productName) {
        this.productName = productName;
    }

    public String getProductImage() {
        return productImage;
    }

    public void setProductImage(String productImage) {
        this.productImage = productImage;
    }

    public Float getProductPrice() {
        return productPrice;
    }

    public void setProductPrice(Float productPrice) {
        this.productPrice = productPrice;
    }

    public Long getProductCountry() {
        return productCountry;
    }

    public void setProductCountry(Long productCountry) {
        this.productCountry = productCountry;
    }

    // KEEP METHODS - put your custom methods here

    public void insertOrReplace() {
        //log("insert " + this);
        ShopDatabase database = new ShopDatabase(true);

        try {
            DaoSession daoSession = database.getDaoSession();
            ProductDao dao = daoSession.getProductDao();
            dao.insertOrReplaceInTx(this);
            daoSession.clear();
        } catch (Exception e) {
            e.printStackTrace();
            log("insert ex = " + e.getMessage());
        } finally {
            database.release();
        }
    }

    public static List<Product> getList(long countryId) {
        List<Product> list = null;
        ShopDatabase database = new ShopDatabase(false);
        try {
            DaoSession daoSession = database.getDaoSession();
            ProductDao dao = daoSession.getProductDao();
            QueryBuilder<Product> queryBuilder = dao.queryBuilder();
            if (countryId != Country.COUNTRY_ID_ALL) {
                queryBuilder.where(ProductDao.Properties.ProductCountry.eq(countryId));
            }
            queryBuilder.orderAsc(ProductDao.Properties.ProductName);
            list = queryBuilder.list();
            daoSession.clear();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            database.release();
        }

        return list != null ? list : Collections.<Product>emptyList();
    }

    @Override
    public String toString() {
        return new StringBuilder()
                .append(getProductName()).toString();
    }

    protected static void log(String message) {
        AppLogger.log(Country.class.getCanonicalName() + " " + message);
    }
    // KEEP METHODS END

}
